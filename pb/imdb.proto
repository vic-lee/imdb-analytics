syntax="proto3";

package imdb;


// ---------------------- Database Service ----------------------
service DatabaseService {

    // Returns a TVshow's identifying information.
    rpc GetShow(GenericShowRequest) returns (Show) {}

    // Returns whether a show has been created, and relevant information to 
    // access that show if it has been created.
    rpc CreateShow(CreateShowRequest) returns (CreateShowResponse) {}

    // Deletes a show if it exists. Does not complain if the client attempts
    // to delete a show that does not exist in the first place.
    rpc DeleteShow(GenericShowRequest) returns (Empty) {}
}

message GenericShowRequest {
    string item_id = 1;
}

message CreateShowRequest {
    string item_name = 1;
}

// CreateShowResponse returns necessary information for the client to access 
// the resource later.
message CreateShowResponse {
    bool created = 1;
    string item_id = 2;
    string time_created = 3;
}

// TVShow schema
message Show {
    string item_id = 1;
    // ...     
}

message Empty {}

// ---------------------- Extractor Servide ----------------------
service ExtractorService {
    rpc InitiateExtraction(ExtractionRequest) returns (ExtractionResponse) {}
}

message ExtractionRequest {
    string item_name = 1;
}

message ExtractionResponse {
    string item_name = 1;
    bool successful = 2;
}

// ---------------------- Job Servide ----------------------

service JobService {
    rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {}
    // Returns the job if found; raises NotFound error if not found
    rpc GetJob(GetJobRequest) returns (Job) {}
    // Returns the job status if found; raises NotFound error if not found
    rpc GetJobStatus(GetJobRequest) returns (JobStatusQueryResponse) {}
    // Returns True if deleted; False if JobNotFound or error during evaluation
    rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse) {}
}

// Prioritizes Job if set to high_priority
message CreateJobRequest {
    string target_name = 1;
    bool is_high_priority = 2;
}

message CreateJobResponse {
    bool successful = 1;
    Job job = 2;
}

message DeleteJobRequest {
    int64 id = 1;
}

message DeleteJobResponse {
    bool successful = 1;
}

message GetJobRequest {
    int64 id = 1;
}

message JobStatusQueryResponse {
    Job.Status status = 1;
    string status_msg = 2;
}

message Job {
    int64 id = 1;
    string target_name = 2;
    enum Status {
        NOT_PROCESSED = 0;
        PROCESSING = 1;
        COMPLETED_SUCCESS = 2;
        COMPLETED_FAILURE = 3;
    }
    Status status = 3;
}

// ---------------------- Recommendation Servide ----------------------
// To be developed...
service RecommendationService {

}

// ---------------------- Rating Prediction Servide ----------------------
// To be developed...
service RatingPredictionService {
    rpc PredictRating(PredictionRequest) returns (PredictionResponse) {}
}

message PredictionRequest {
    string item_id = 1;
}

message PredictionResponse {
    bool is_resource_valid = 1;
    // prediction metrics...
}