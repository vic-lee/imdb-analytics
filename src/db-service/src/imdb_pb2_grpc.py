# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import imdb_pb2 as imdb__pb2


class DatabaseServiceStub(object):
  """---------------------- Database Service ----------------------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetShow = channel.unary_unary(
        '/imdb.DatabaseService/GetShow',
        request_serializer=imdb__pb2.GenericShowRequest.SerializeToString,
        response_deserializer=imdb__pb2.Show.FromString,
        )
    self.CreateShow = channel.unary_unary(
        '/imdb.DatabaseService/CreateShow',
        request_serializer=imdb__pb2.CreateShowRequest.SerializeToString,
        response_deserializer=imdb__pb2.CreateShowResponse.FromString,
        )
    self.DeleteShow = channel.unary_unary(
        '/imdb.DatabaseService/DeleteShow',
        request_serializer=imdb__pb2.GenericShowRequest.SerializeToString,
        response_deserializer=imdb__pb2.Empty.FromString,
        )


class DatabaseServiceServicer(object):
  """---------------------- Database Service ----------------------
  """

  def GetShow(self, request, context):
    """Returns a TVshow's identifying information.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateShow(self, request, context):
    """Returns whether a show has been created, and relevant information to 
    access that show if it has been created.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteShow(self, request, context):
    """Deletes a show if it exists. Does not complain if the client attempts
    to delete a show that does not exist in the first place.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetShow': grpc.unary_unary_rpc_method_handler(
          servicer.GetShow,
          request_deserializer=imdb__pb2.GenericShowRequest.FromString,
          response_serializer=imdb__pb2.Show.SerializeToString,
      ),
      'CreateShow': grpc.unary_unary_rpc_method_handler(
          servicer.CreateShow,
          request_deserializer=imdb__pb2.CreateShowRequest.FromString,
          response_serializer=imdb__pb2.CreateShowResponse.SerializeToString,
      ),
      'DeleteShow': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteShow,
          request_deserializer=imdb__pb2.GenericShowRequest.FromString,
          response_serializer=imdb__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imdb.DatabaseService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ExtractorServiceStub(object):
  """---------------------- Extractor Servide ----------------------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InitiateExtraction = channel.unary_unary(
        '/imdb.ExtractorService/InitiateExtraction',
        request_serializer=imdb__pb2.ExtractionRequest.SerializeToString,
        response_deserializer=imdb__pb2.ExtractionResponse.FromString,
        )


class ExtractorServiceServicer(object):
  """---------------------- Extractor Servide ----------------------
  """

  def InitiateExtraction(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExtractorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InitiateExtraction': grpc.unary_unary_rpc_method_handler(
          servicer.InitiateExtraction,
          request_deserializer=imdb__pb2.ExtractionRequest.FromString,
          response_serializer=imdb__pb2.ExtractionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imdb.ExtractorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class JobServiceStub(object):
  """---------------------- Job Servide ----------------------

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateJob = channel.unary_unary(
        '/imdb.JobService/CreateJob',
        request_serializer=imdb__pb2.CreateJobRequest.SerializeToString,
        response_deserializer=imdb__pb2.CreateJobResponse.FromString,
        )
    self.GetJob = channel.unary_unary(
        '/imdb.JobService/GetJob',
        request_serializer=imdb__pb2.GetJobRequest.SerializeToString,
        response_deserializer=imdb__pb2.Job.FromString,
        )
    self.GetJobStatus = channel.unary_unary(
        '/imdb.JobService/GetJobStatus',
        request_serializer=imdb__pb2.GetJobRequest.SerializeToString,
        response_deserializer=imdb__pb2.JobStatusQueryResponse.FromString,
        )
    self.DeleteJob = channel.unary_unary(
        '/imdb.JobService/DeleteJob',
        request_serializer=imdb__pb2.DeleteJobRequest.SerializeToString,
        response_deserializer=imdb__pb2.DeleteJobResponse.FromString,
        )


class JobServiceServicer(object):
  """---------------------- Job Servide ----------------------

  """

  def CreateJob(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetJob(self, request, context):
    """Returns the job if found; raises NotFound error if not found
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetJobStatus(self, request, context):
    """Returns the job status if found; raises NotFound error if not found
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteJob(self, request, context):
    """Returns True if deleted; False if JobNotFound or error during evaluation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_JobServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateJob': grpc.unary_unary_rpc_method_handler(
          servicer.CreateJob,
          request_deserializer=imdb__pb2.CreateJobRequest.FromString,
          response_serializer=imdb__pb2.CreateJobResponse.SerializeToString,
      ),
      'GetJob': grpc.unary_unary_rpc_method_handler(
          servicer.GetJob,
          request_deserializer=imdb__pb2.GetJobRequest.FromString,
          response_serializer=imdb__pb2.Job.SerializeToString,
      ),
      'GetJobStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetJobStatus,
          request_deserializer=imdb__pb2.GetJobRequest.FromString,
          response_serializer=imdb__pb2.JobStatusQueryResponse.SerializeToString,
      ),
      'DeleteJob': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteJob,
          request_deserializer=imdb__pb2.DeleteJobRequest.FromString,
          response_serializer=imdb__pb2.DeleteJobResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imdb.JobService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RecommendationServiceStub(object):
  """---------------------- Recommendation Servide ----------------------
  To be developed...
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """


class RecommendationServiceServicer(object):
  """---------------------- Recommendation Servide ----------------------
  To be developed...
  """


def add_RecommendationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imdb.RecommendationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RatingPredictionServiceStub(object):
  """---------------------- Rating Prediction Servide ----------------------
  To be developed...
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PredictRating = channel.unary_unary(
        '/imdb.RatingPredictionService/PredictRating',
        request_serializer=imdb__pb2.PredictionRequest.SerializeToString,
        response_deserializer=imdb__pb2.PredictionResponse.FromString,
        )


class RatingPredictionServiceServicer(object):
  """---------------------- Rating Prediction Servide ----------------------
  To be developed...
  """

  def PredictRating(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RatingPredictionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PredictRating': grpc.unary_unary_rpc_method_handler(
          servicer.PredictRating,
          request_deserializer=imdb__pb2.PredictionRequest.FromString,
          response_serializer=imdb__pb2.PredictionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'imdb.RatingPredictionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
